<?php

namespace Tests\Feature\Web;

use App\Enums\OrderStatusEnum;
use App\Models\Order;
use App\Models\OrderDetail;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Http;
use Inertia\Testing\AssertableInertia;
use Tests\Feature\Utilities\ProductTestCase;

class PaymentControllerTest extends ProductTestCase
{
    use RefreshDatabase;

    protected Order $pendingOrder;
    protected Order $completedOrder;
    protected OrderDetail $orderDetail;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->pendingOrder = Order::factory()->create([
            'status' => OrderStatusEnum::PENDING,
            'user_id' => $this->customerUser->id,
        ]);

        $this->completedOrder = Order::factory()->create([
            'status' => OrderStatusEnum::COMPLETED,
            'user_id' => $this->customerUser->id,
        ]);

        $this->orderDetail = OrderDetail::factory()->create([
            'order_id' => $this->pendingOrder->id,
            'quantity' => 1,
            'product_id' => $this->product->id,
        ]);
    }


    public function testHandleRedirectWithPendingOrderIsApproved(): void
    {
        $mockResponse = [
            "requestId" => $this->pendingOrder->request_id,
            "status" => [
                "status" => "APPROVED",
                "reason" => "00",
                "message" => "La petición ha sido aprobada exitosamente",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
        ];

        Http::fake([config('placetopay.url') . '/*' => $mockResponse,]);

        $response = $this->actingAs($this->customerUser)->get(route('payment.result', $this->pendingOrder->id));

        $response->assertStatus(200);
        $response->assertInertia(
            fn (AssertableInertia $page) => $page
                ->component('Payment/Completed')
                ->has('order')
        );

        $this->assertDatabaseHas('orders', [
            'id' => $this->pendingOrder->id,
            'status' => OrderStatusEnum::COMPLETED,
        ]);
    }

    public function testHandleRedirectWithPendingOrderIsRejected(): void
    {
        $mockResponse = [
            "requestId" => $this->pendingOrder->request_id,
            "status" => [
                "status" => "REJECTED",
                "reason" => "00",
                "message" => "La petición ha sido rechazada",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
        ];

        Http::fake([config('placetopay.url') . '/*' => $mockResponse,]);

        $response = $this->actingAs($this->customerUser)->get(route('payment.result', $this->pendingOrder->id));

        $response->assertStatus(200);
        $response->assertInertia(
            fn (AssertableInertia $page) => $page
                ->component('Payment/Rejected')
                ->has('order')
        );

        $this->assertDatabaseHas('orders', [
            'id' => $this->pendingOrder->id,
            'status' => OrderStatusEnum::REJECTED,
        ]);
    }

    public function testHandleRedirectWithPendingOrderStillPending(): void
    {
        $mockResponse = [
            "requestId" => $this->pendingOrder->request_id,
            "status" => [
                "status" => "PENDING",
                "reason" => "00",
                "message" => "La petición ha sido rechazada",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
        ];

        Http::fake([config('placetopay.url') . '/*' => $mockResponse,]);

        $response = $this->actingAs($this->customerUser)->get(route('payment.result', $this->pendingOrder->id));

        $response->assertStatus(200);
        $response->assertInertia(
            fn (AssertableInertia $page) => $page
                ->component('Payment/Pending')
                ->has('order')
        );

        $this->assertDatabaseHas('orders', [
            'id' => $this->pendingOrder->id,
            'status' => OrderStatusEnum::PENDING,
        ]);
    }

    public function testHandleRedirectWithNonPendingOrder(): void
    {
        $response = $this->actingAs($this->customerUser)->get(route('payment.result', $this->completedOrder->id));

        $response->assertStatus(302);
        $response->assertRedirect(route('home'));
    }

    public function testHandleCanceledWithNotPendingOrder(): void
    {
        $response = $this->actingAs($this->customerUser)->get(route('payment.canceled', $this->completedOrder->id));

        $response->assertStatus(302);
        $response->assertRedirect(route('home'));
    }

    public function testHandleCanceledWithPendingOrder(): void
    {
        $mockResponse = [
            "requestId" => $this->pendingOrder->request_id,
            "status" => [
                "status" => "REJECTED",
                "reason" => "00",
                "message" => "La petición ha sido rechazada",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
        ];

        Http::fake([config('placetopay.url') . '/*' => $mockResponse,]);
        $response = $this->actingAs($this->customerUser)->get(route('payment.canceled', $this->pendingOrder->id));

        $response->assertStatus(200);
        $response->assertInertia(
            fn (AssertableInertia $page) => $page
                ->component('Payment/Canceled')
        );

        $this->assertDatabaseHas('orders', [
            'id' => $this->pendingOrder->id,
            'status' => OrderStatusEnum::REJECTED,
        ]);
    }

    public function testRetryOrderWithNotPendingOrder(): void
    {
        $response = $this->actingAs($this->customerUser)->get(route('payment.retry', $this->completedOrder->id));

        $response->assertStatus(302);
        $response->assertRedirect(route('home'));
    }

    public function testRetryOrderWithPendingOrder(): void
    {
        $response = $this->actingAs($this->customerUser)->get(route('payment.retry', $this->pendingOrder->id));

        $response->assertStatus(201);
        $response->assertJson([
            'redirect_url' => $this->pendingOrder->process_url
        ]);
    }

    public function testRetryOrderWithRejectedOrder(): void
    {
        $mockResponse = [
            "status" => [
                "status" => "APPROVED",
                "reason" => "00",
                "message" => "La petición ha sido aprobada exitosamente",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
            "requestId" => 1,
            "processUrl" => "https://test.placetopay.com/",
        ];

        Http::fake([
            config('placetopay.url') . '/*' => Http::response($mockResponse)]);


        $response = $this->actingAs($this->customerUser)->get(route('payment.retry', $this->pendingOrder->id));

        $response->assertStatus(201);
        $response->assertJson([
            'redirect_url' => $this->pendingOrder->process_url
        ]);
    }

    public function testProductStockIsRestoredInRejectedOrder(): void
    {
        $mockResponse = [
            "requestId" => $this->pendingOrder->request_id,
            "status" => [
                "status" => "REJECTED",
                "reason" => "00",
                "message" => "La petición ha sido rechazada",
                "date" => "2021-11-30T15:08:27-05:00",
            ],
        ];

        Http::fake([config('placetopay.url') . '/api/session/*' => $mockResponse,]);

        $this->product->stock = 1;
        $this->product->save();

        $this->assertDatabaseHas('products', [
            'id' => $this->product->id,
            'stock' => 1,
        ]);

        $response = $this->actingAs($this->customerUser)->get(route('payment.result', $this->pendingOrder->id));

        $response->assertStatus(200);
        $response->assertInertia(
            fn (AssertableInertia $page) => $page
                ->component('Payment/Rejected')
                ->has('order')
        );

        $this->assertDatabaseHas('products', [
            'id' => $this->product->id,
            'stock' => 2,
        ]);
    }
}
